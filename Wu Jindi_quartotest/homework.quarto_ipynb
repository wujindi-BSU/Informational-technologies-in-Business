{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"HomeWork\"\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Lecture\n",
        "\n",
        "## Lecture01\n",
        "\n",
        "# Coding Basics\n",
        "\n",
        "In this chapter, you'll learn about the basics of objects, types, operations, conditions, loops, functions, and imports. These are the basic building blocks of almost all programming languages and will serve you well for your coding and economics journey.\n",
        "\n",
        "This chapter has benefited from the excellent [*Python Programming for Data Science*](https://www.tomasbeuzen.com/python-programming-for-data-science/README.html) book by Tomas Beuzen.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{tip}\n",
        "Remember, you can launch this page interactively by using the 'Colab' button under the rocket symbol (<i class=\"fas fa-rocket\"></i>) at the top of the page. You can also download this page as a Jupyter Notebook to run on your own computer: use the 'download .ipynb' button under the download symbol the top of the page and open that file using Visual Studio Code.\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## If you get stuck\n",
        "\n",
        "It's worth saying at the outset that *no-one* memorises half of the stuff you'll see in this book. 80% or more of time spent programming is actually time spent looking up how to do this or that online, 'debugging' a code for errors, or testing code. This applies to all programmers, regardless of level. You are here to learn the skills and concepts of programming, not the precise syntax (which is easy to look up later).\n",
        "\n",
        "![xkcd-what-did-you-see](https://imgs.xkcd.com/comics/wisdom_of_the_ancients.png)\n",
        "\n",
        "Knowing how to Google is one of the most important skills of any coder. No-one remembers every function from every library. Here are some useful coding resources:\n",
        "\n",
        "- when you have an error, look on Stack Overflow to see if anyone else had the same error (they probably did) and how they overcame it.\n",
        "\n",
        "- if you're having trouble navigating a new package or library, look up the documentation online. The best libraries put as much effort into documentation as they do the code base.\n",
        "\n",
        "- use cheat sheets to get on top of a range of functionality quickly. For instance, this excellent (mostly) base Python [Cheat Sheet](https://gto76.github.io/python-cheatsheet/).\n",
        "\n",
        "- if you're having a coding issue, take a walk to think about the problem, or explain your problem to an animal toy on your desk ([traditionally](https://en.wikipedia.org/wiki/Rubber_duck_debugging) a rubber duck, but other animals are available).\n",
        "## Coding Basics\n",
        "\n",
        "Let's review some basics in the interests of getting you up to speed as quickly as possible. You can use Python as a calculator:\n",
        "print(1 / 200 * 30)\n",
        "print((59 + 73 + 2) / 3)\n",
        "The extra package **numpy** contains many of the additional mathematical operators that you might need. If you don't already have **numpy** installed, open up the terminal in Visual Studio Code (go to \"Terminal -> New Terminal\" and then type `pip install numpy` into the terminal then hit return). Once you have **numpy** installed, you can import it and use it like this:\n",
        "import numpy as np\n",
        "\n",
        "print(np.sin(np.pi / 2))\n",
        "You can create new objects with the assignment operator `=`. You should think of this as copying the value of whatever is on the right-hand side into the variable on the left-hand side.\n",
        "x = 3 * 4\n",
        "print(x)\n",
        "There are several structures in Python that capture multiple objects simultaneously but perhaps the most common is the *list*, which is designated by *square brackets*.\n",
        "primes = [1, 2, 3, 5, 7, 11, 13]\n",
        "print(primes)\n",
        "All Python statements where you create objects (known as *assignment* statements) have the same form:\n",
        "\n",
        "```\n",
        "object_name = value\n",
        "```\n",
        "\n",
        "When reading that code, say \"object name gets value\" in your head.\n",
        "## Comments\n",
        "\n",
        "Python will ignore any text after `#`. This allows to you to write **comments**, text that is ignored by Python but can be read by other humans. We'll sometimes include comments in examples explaining what's happening with the code.\n",
        "\n",
        "Comments can be helpful for briefly describing what the subsequent code does.\n",
        "# define primes\n",
        "primes = [1, 2, 3, 5, 7, 11, 13]\n",
        "# multiply primes by 2\n",
        "[el * 2 for el in primes]\n",
        "With short pieces of code like this, it is not necessary to leave a command for every single line of code and you should try to use informative names wherever you can because these help readers of your code (likely to be you in the future) understand what is going on!\n",
        "## Keeping Track of Variables\n",
        "\n",
        "You can always inspect an already-created object by typing its name into the interactive window:\n",
        "primes\n",
        "If you want to know what *type* of object it is, use `type(object)` in the interactive window like this:\n",
        "type(primes)\n",
        "Visual Studio Code has some powerful features to help you keep track of objects:\n",
        "\n",
        "1. At the top of your interactive window, you should see a 'Variables' button. Click it to see a panel appear with all variables that you've defined.\n",
        "2. Hover your mouse over variables you've previously entered into the interactive window; you will see a pop-up that tells you what type of object it is.\n",
        "3. If you start typing a variable name into the interactive window, Visual Studio Code will try to auto-complete the name for you. Press the 'tab' key on your keyboard to accept the top option.\n",
        "## Calling Functions\n",
        "\n",
        "If you're an economist, you hardly need to be told you what a function is. In coding, it's much the same as in mathematics: a function has inputs, it performs its function, and it returns any outputs. Python has a large number of built-in functions. You can also import functions from packages (like we did with `np.sin`) or define your own.\n",
        "\n",
        "In coding, a function has inputs, it performs its function, and it returns any outputs. Let's see a simple example of using a built-in function, `sum()`:\n",
        "sum(primes)\n",
        "The general structure of functions is the function name, followed by brackets, followed by one or more arguments. Sometimes there will also be *keyword arguments*. For example, `sum()` comes with a keyword argument that tells the function to start counting from a specific number. Let's see this in action by starting from ten:\n",
        "sum(primes, start=10)\n",
        "If you're ever unsure of what a function does, you can call `help()` on it (itself a function):\n",
        "help(sum)\n",
        "Or, in Visual Studio Code, hover your mouse over the function name.\n",
        "\n",
        "\n",
        "````{admonition} Exercise\n",
        "\n",
        "Why does this code not work?\n",
        "\n",
        "```python\n",
        "my_variable = 10\n",
        "my_varÄ±able\n",
        "```\n",
        "\n",
        "Look carefully! This may seem like an exercise in pointlessness, but training your brain to notice even the tiniest difference will pay off when programming.\n",
        "````\n",
        "## Values, variables, and types\n",
        "\n",
        "A value is datum such as a number or text. There are different types of values: 352.3 is known as a float or double, 22 is an integer, and \"Hello World!\" is a string. A variable is a name that refers to a value: you can think of a variable as a box that has a value, or multiple values, packed inside it. \n",
        "\n",
        "Almost any word can be a variable name as long as it starts with a letter or an underscore, although there are some special keywords that can't be used because they already have a role in the Python language: these include `if`, `while`, `class`, and `lambda`.\n",
        "\n",
        "Creating a variable in Python is achieved via an assignment (putting a value in the box), and this assignment is done via the `=` operator. The box, or variable, goes on the left while the value we wish to store appears on the right. It's simpler than it sounds:\n",
        "a = 10\n",
        "print(a)\n",
        "This creates a variable `a`, assigns the value 10 to it, and prints it. Sometimes you will hear variables referred to as *objects*. Everything that is not a literal value, such as `10`, is an object. In the above example, `a` is an object that has been assigned the value `10`.\n",
        "\n",
        "How about this:\n",
        "b = \"This is a string\"\n",
        "print(b)\n",
        "It's the same thing but with a different **type** of data, a string instead of an integer. Python is *dynamically typed*, which means it will guess what type of variable you're creating as you create it. This has pros and cons, with the main pro being that it makes for more concise code.\n",
        "\n",
        "```{admonition} Important\n",
        "Everything is an object, and every object has a type.\n",
        "```\n",
        "\n",
        "The most basic built-in data types that you'll need to know about are: integers `10`, floats `1.23`, strings `like this`, booleans `True`, and nothing `None`. Python also has a built-in type called a list `[10, 15, 20]` that can contain anything, even *different* types. So\n",
        "list_example = [10, 1.23, \"like this\", True, None]\n",
        "print(list_example)\n",
        "is completely valid code. `None` is a special type of nothingness, and represents an object with no value. It has type `NoneType` and is more useful than you might think! \n",
        "\n",
        "As well as the built-in types, packages can define their own custom types. If you ever want to check the type of a Python variable, you can call the `type()` function on it like so:\n",
        "type(list_example)\n",
        "This is especially useful for debugging `ValueError` messages.\n",
        "\n",
        "Below is a table of common data types in Python:\n",
        "\n",
        "| Name          | Type name  | Type Category  | Description                                   | Example                                    |\n",
        "| :-------------------- | :--------- | :------------- | :-------------------------------------------- | :----------------------------------------- |\n",
        "| integer               | `int`      | Numeric Type   | positive/negative whole numbers               | `22`                                       |\n",
        "| floating point number | `float`    | Numeric Type   | real number in decimal form                   | `3.14159`                                  |\n",
        "| boolean               | `bool`     | Boolean Values | true or false                                 | `True`                                     |\n",
        "| string                | `str`      | Sequence Type  | text                                          | `\"Hello World!\"`                 |\n",
        "| list                  | `list`     | Sequence Type  | a collection of objects - mutable & ordered   | `['text entry', True, 16]`               |\n",
        "| tuple                 | `tuple`    | Sequence Type  | a collection of objects - immutable & ordered | `(51.02, -0.98)`                 |\n",
        "| dictionary            | `dict`     | Mapping Type   | mapping of key-value pairs                    | `{'name':'Ada', 'subject':'computer science'}` |\n",
        "| none                  | `NoneType` | Null Object    | represents no value                           | `None`                                     |\n",
        "| function                  | `function` | Function   | Represents a function                           | `def add_one(x): return x+1`                                     |\n",
        "\n",
        "````{admonition} Exercise\n",
        "What type is this Python object?\n",
        "\n",
        "```python\n",
        "cities_to_temps = {\"Paris\": 32, \"London\": 22, \"Seville\": 36, \"Wellesley\": 29}\n",
        "```\n",
        "\n",
        "What type is the first key (hint: comma separated entries form key-value pairs)?\n",
        "````\n",
        "\n",
        "### Brackets\n",
        "\n",
        "You may notice that there are several kinds of brackets that appear in the code we've seen so far, including `[]`, `{}`, and `()`. These can play different roles depending on the context, but the most common uses are:\n",
        "\n",
        "- `[]` is used to denote a list, eg `['a', 'b']`, or to signify accessing a position using an index, eg `vector[0]` to get the first entry of a variable called vector.\n",
        "\n",
        "- `{}` is used to denote a set, eg `{'a', 'b'}`, or a dictionary (with pairs of terms), eg `{'first_letter': 'a', 'second_letter': 'b'}`.\n",
        "\n",
        "- `()` is used to denote a tuple, eg `('a', 'b')`, or the arguments to a function, eg `function(x)` where `x` is the input passed to the function, *or* to indicate the order operations are carried out.\n",
        "\n",
        "## Lists and slicing\n",
        "\n",
        "Lists are a really useful way to work with lots of data at once. They're defined with square brackets, with entries separated by commas. You can also construct them by appending entries:\n",
        "list_example.append(\"one more entry\")\n",
        "print(list_example)\n",
        "And you can access earlier entries using an index, which begins at 0 and ends at one less than the length of the list (this is the convention in many programming languages). For instance, to print specific entries at the start, using `0`, and end, using `-1`:\n",
        "print(list_example[0])\n",
        "print(list_example[-1])\n",
        "```{admonition} Exercise\n",
        "How might you access the penultimate entry in a list object if you didn't know how many elements it had?\n",
        "```\n",
        "As well as accessing positions in lists using indexing, you can use *slices* on lists. This uses the colon character, `:`, to stand in for 'from the beginning' or 'until the end' (when only appearing once). For instance, to print just the last two entries, we would use the index `-2:` to mean from the second-to-last onwards. Here are two distinct examples: getting the first three and last three entries to be successively printed:\n",
        "print(list_example[:3])\n",
        "print(list_example[-3:])\n",
        "Slicing can be even more elaborate than that because we can jump entries using a second colon. Here's a full example that begins at the second entry (remember the index starts at 0), runs up until the second-to-last entry (exclusive), and jumps every other entry inbetween (range just produces a list of integers from the value to one less than the last):\n",
        "list_of_numbers = list(range(1, 11))\n",
        "start = 1\n",
        "stop = -1\n",
        "step = 2\n",
        "print(list_of_numbers[start:stop:step])\n",
        "A handy trick is that you can print a reversed list entirely using double colons:\n",
        "print(list_of_numbers[::-1])\n",
        "````{admonition} Exercise\n",
        "Slice the `list_example` from earlier to get only the first five entries.\n",
        "````\n",
        "As noted, lists can hold any type, including other lists! Here's a valid example of a list that's got a lot going on:\n",
        "wacky_list = [\n",
        "    3.1415,\n",
        "    16,\n",
        "    [\"five\", 4, 3],\n",
        "    (91, 93, 90),\n",
        "    \"Hello World!\",\n",
        "    True,\n",
        "    None,\n",
        "    {\"key\": \"value\", \"key2\": \"value2\"},\n",
        "]\n",
        "wacky_list\n",
        "In reality, it's usually not a good idea to mix data types in a list, but Python is very flexible. Other iterables (objects composed of multiple elements, of which the list is just one in Python) can also store objects of different types.\n",
        "```{admonition} Exercise\n",
        "Can you identify the types of each of the entries in `wacky_list`?\n",
        "```\n",
        "\n",
        "## Operators\n",
        "\n",
        "All of the basic operators you see in mathematics are available to use: `+` for addition, `-` for subtraction, `*` for multiplication, `**` for powers, `/` for division, and `%` for modulo. These work as you'd expect on numbers. But these operators are sometimes defined for other built-in data types too. For instance, we can 'sum' strings (which really concatenates them):\n",
        "string_one = \"This is an example \"\n",
        "string_two = \"of string concatenation\"\n",
        "string_full = string_one + string_two\n",
        "print(string_full)\n",
        "It works for lists too:\n",
        "list_one = [\"apples\", \"oranges\"]\n",
        "list_two = [\"pears\", \"satsumas\"]\n",
        "list_full = list_one + list_two\n",
        "print(list_full)\n",
        "Perhaps more surprisingly, you can multiply strings!\n",
        "string = \"apples, \"\n",
        "print(string * 3)\n",
        "Below is a table of the basic arithmetic operations.\n",
        "\n",
        "| Operator |   Description    |\n",
        "| :------: | :--------------: |\n",
        "|   `+`    |     addition     |\n",
        "|   `-`    |   subtraction    |\n",
        "|   `*`    |  multiplication  |\n",
        "|   `/`    |     division     |\n",
        "|   `**`   |  exponentiation  |\n",
        "|   `//`   | integer division / floor division |\n",
        "|   `%`    |      modulo      |\n",
        "|   `@`    |     matrix multiplication |\n",
        "\n",
        "As well as the usual operators, Python supports *assignment operators*. An example of one is `x+=3`, which is equivalent to running `x = x + 3`. Pretty much all of the operators can be used in this way.\n",
        "\n",
        "```{admonition} Exercise\n",
        "Using Python operations only, what is \n",
        "\n",
        "$$\n",
        "\\frac{2^5}{7 \\cdot (4 - 2^3)}\n",
        "$$\n",
        "\n",
        "```\n",
        "\n",
        "## Strings\n",
        "\n",
        "In some ways, strings are treated a bit like lists, meaning you can access the individual characters via slicing and indexing. For example:\n",
        "string = \"cheesecake\"\n",
        "print(string[-4:])\n",
        "Both lists and strings will also allow you to use the `len()` command to get their length:\n",
        "string = \"cheesecake\"\n",
        "print(\"String has length:\")\n",
        "print(len(string))\n",
        "list_of_numbers = range(1, 20)\n",
        "print(\"List of numbers has length:\")\n",
        "print(len(list_of_numbers))\n",
        "```{admonition} Exercise\n",
        "What is the `len` of a list created by `range(n)` where `n` could be any integer?\n",
        "```\n",
        "Strings have type `string` and can be defined by single or double quotes, eg `string = \"cheesecake\"` would have been equally valid above. It's best practice to use one convention and stick to it, and most people use double quotes for strings.\n",
        "\n",
        "There are various functions built into Python to help you work with strings that are particularly useful for cleaning messy data. For example, imagine you have a variable name like 'This Is /A Variable   '. (You may think this is implausibly bad; if only that were true...). Let's see if we can clean this up:\n"
      ],
      "id": "36c85306"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "string = \"This Is /A Variable   \"\n",
        "string = string.replace(\"/\", \"\").rstrip().lower()\n",
        "print(string)"
      ],
      "id": "bbe251b0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The steps above replace the character '/', strip out whitespace on the right hand-side of the string, and put everything in lower case. The brackets after the words signify that a function has been applied; we'll see more of functions later.\n",
        "\n",
        "```{admonition} Exercise\n",
        "Using string operations, strip the leading and trailing spaces, make upper case, and remove the underscores from the string `\"    this_is_a_better_variable_name   \"`.\n",
        "```\n",
        "\n",
        "**Changing Type to String**\n",
        "\n",
        "We'll look at this in more detail shortly, but while we're on strings, it seems useful to mention it now: you'll often want to output one type of data as another, and Python generally knows what you're trying to achieve if you, for example, `print()` a boolean value. For numbers, there are more options and you can see a big list of advice on string formatting of all kinds of things [here](https://pyformat.info/). For now, let's just see a simple example of something called an f-string, a string that combines a number and a string (these begin with an `f` for formatting):\n",
        "value = 20\n",
        "sqrt_val = 20 ** 0.5\n",
        "print(f\"The square root of {value:d} is {sqrt_val:.2f}\")\n",
        "The formatting command `:d` is an instruction to treat `value` like an integer, while `:.2f` is an instruction to print it like a float with 2 decimal places.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{note}\n",
        "f-strings are only available in Python 3.6+\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{admonition} Exercise\n",
        "Write a print command with the `sqrt_val` expressed to 3 decimal places.\n",
        "```\n",
        "\n",
        "## Booleans and conditions\n",
        "\n",
        "Some of the most important operations you will perform are with `True` and `False` values, also known as boolean data types. There are two types of operation that are associated with booleans: boolean operations, in which existing booleans are combined, and condition operations, which create a boolean when executed.\n",
        "\n",
        "Boolean operators that return booleans are as follows:\n",
        "\n",
        "| Operator | Description |\n",
        "| :---: | :--- |\n",
        "|`x and y`| are `x` and `y` both True? |\n",
        "|`x or y` | is at least one of `x` and `y` True? |\n",
        "| `not x` | is `x` False? | \n",
        "\n",
        "These behave as you'd expect: `True and False` evaluates to `False`, while `True or False` evaluates to `True`. There's also the `not` keyword. For example\n",
        "not True\n",
        "as you would expect.\n",
        "\n",
        "Conditions are expressions that evaluate as booleans. A simple example is `10 == 20`. The `==` is an operator that compares the objects on either side and returns `True` if they have the same *values*--though be careful using it with different data types.\n",
        "\n",
        "Here's a table of conditions that return booleans:\n",
        "\n",
        "| Operator  | Description                          |\n",
        "| :-------- | :----------------------------------- |\n",
        "| `x == y ` | is `x` equal to `y`?                 |\n",
        "| `x != y`  | is `x` not equal to `y`?             |\n",
        "| `x > y`   | is `x` greater than `y`?             |\n",
        "| `x >= y`  | is `x` greater than or equal to `y`? |\n",
        "| `x < y`   | is `x` less than `y`?                |\n",
        "| `x <= y`  | is `x` less than or equal to `y`?    |\n",
        "| `x is y`  | is `x` the same object as `y`?       |\n",
        "\n",
        "\n",
        "As you can see from the table, the opposite of `==` is `!=`, which you can read as 'not equal to the value of'. Here's an example of `==`:\n",
        "boolean_condition = 10 == 20\n",
        "print(boolean_condition)\n",
        "```{admonition} Exercise\n",
        "What does `not (not True)` evaluate to?\n",
        "```\n",
        "The real power of conditions comes when we start to use them in more complex examples. Some of the keywords that evaluate conditions are `if`, `else`, `and`, `or`, `in`, `not`, and `is`. Here's an example showing how some of these conditional keywords work:\n",
        "name = \"Ada\"\n",
        "score = 99\n",
        "\n",
        "if name == \"Ada\" and score > 90:\n",
        "    print(\"Ada, you achieved a high score.\")\n",
        "\n",
        "if name == \"Smith\" or score > 90:\n",
        "    print(\"You could be called Smith or have a high score\")\n",
        "\n",
        "if name != \"Smith\" and score > 90:\n",
        "    print(\"You are not called Smith and you have a high score\")\n",
        "All three of these conditions evaluate as True, and so all three messages get printed. Given that `==` and `!=` test for equality and not equal, respectively, you may be wondering what the keywords `is` and `not` are for. Remember that everything in Python is an object, and that values can be assigned to objects. `==` and `!=` compare *values*, while `is` and `not` compare *objects*. For example,\n",
        "name_list = [\"Ada\", \"Adam\"]\n",
        "name_list_two = [\"Ada\", \"Adam\"]\n",
        "\n",
        "# Compare values\n",
        "print(name_list == name_list_two)\n",
        "\n",
        "# Compare objects\n",
        "print(name_list is name_list_two)\n",
        "Note that code with lots of branching if statements is not very helpful to you or to anyone else who reads your code. Some automatic code checkers will pick this up and tell you that your code is too complex. Almost all of the time, there's a way to rewrite your code without lots of branching logic that will be better and clearer than having many nested `if` statements.\n",
        "One of the most useful conditional keywords is `in`. This one must pop up ten times a day in most coders' lives because it can pick out a variable or make sure something is where it's supposed to be.\n",
        "name_list = [\"Lovelace\", \"Smith\", \"Hopper\", \"Babbage\"]\n",
        "\n",
        "print(\"Lovelace\" in name_list)\n",
        "\n",
        "print(\"Bob\" in name_list)\n",
        "```{admonition} Exercise\n",
        "Check if \"a\" is in the string \"Walloping weasels\" using `in`. Is \"a\" `in` \"Anodyne\"?\n",
        "```\n",
        "The opposite is `not in`.\n",
        "\n",
        "Finally, one conditional construct you're bound to use at *some* point, is the `if`...`else` structure:\n",
        "score = 98\n",
        "\n",
        "if score == 100:\n",
        "    print(\"Top marks!\")\n",
        "elif score > 90 and score < 100:\n",
        "    print(\"High score!\")\n",
        "elif score > 10 and score <= 90:\n",
        "    pass\n",
        "else:\n",
        "    print(\"Better luck next time.\")\n",
        "Note that this does nothing if the score is between 11 and 90, and prints a message otherwise.\n",
        "\n",
        "```{admonition} Exercise\n",
        "Create a new `if` ... `elif` ... `else` statement that prints \"well done\" if a score is over 90, \"good\" if between 40 and 90, and \"bad luck\" otherwise.\n",
        "```\n",
        "\n",
        "One nice feature of Python is that you can make multiple boolean comparisons in a single line.\n",
        "a, b = 3, 6\n",
        "\n",
        "1 < a < b < 20\n",
        "## Indentation\n",
        "\n",
        "You'll have seen that certain parts of the code examples are indented. Code that is part of a function, a conditional clause, or loop is indented. This isn't a code style choice, it's actually what tells the language that some code is to be executed as part of, say, a loop and not to executed after the loop is finished.\n",
        "\n",
        "Here's a basic example of indentation as part of an `if` loop. The `print()` statement that is indented only executes if the condition evaluates to true.\n",
        "x = 10\n",
        "\n",
        "if x > 2:\n",
        "    print(\"x is greater than 2\")\n",
        "\n",
        "\n",
        "\n",
        "```{tip}\n",
        "The VS Code extension *indent-rainbow* colours different levels of indentation differently for ease of reading.\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "When functions, conditional clauses, or loops are combined together, they each cause an *increase* in the level of indentation. Here's a double indent.\n",
        "if x > 2:\n",
        "    print(\"outer conditional cause\")\n",
        "    for i in range(4):\n",
        "        print(\"inner loop\")\n",
        "\n",
        "\n",
        "The standard practice for indentation is that each sub-statement should be indented by 4 spaces. It can be hard to keep track of these but, as usual, Visual Studio Code has you covered. Go to Settings (the cog in the bottom left-hand corner, then click Settings) and type 'Whitespace' into the search bar. Under 'Editor: Render Whitespace', select 'boundary'. This will show any whitespace that is more than one character long using faint grey dots. Each level of indentation in your Python code should now begin with four grey dots showing that it consists of four spaces.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{tip}\n",
        "Rendering whitespace using Visual Studio Code's settings makes it easier to navigate different levels of indentation.\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{admonition} Exercise\n",
        "Try writing a code snippet that reaches the triple level of indentation.\n",
        "```\n",
        "## Dictionaries\n",
        "\n",
        "Another built-in Python type that is enormously useful is the *dictionary*. This provides a mapping one set of variables to another (either one-to-one or many-to-one). Let's see an example of defining a dictionary and using it:\n",
        "fruit_dict = {\n",
        "    \"Jazz\": \"Apple\",\n",
        "    \"Owari\": \"Satsuma\",\n",
        "    \"Seto\": \"Satsuma\",\n",
        "    \"Pink Lady\": \"Apple\",\n",
        "}\n",
        "\n",
        "# Add an entry\n",
        "fruit_dict.update({\"Cox\": \"Apple\"})\n",
        "\n",
        "variety_list = [\"Jazz\", \"Jazz\", \"Seto\", \"Cox\"]\n",
        "\n",
        "fruit_list = [fruit_dict[x] for x in variety_list]\n",
        "print(fruit_list)\n",
        "From an input list of varieties, we get an output list of their associated fruits. Another good trick to know with dictionaries is that you can iterate through their keys and values:\n",
        "for key, value in fruit_dict.items():\n",
        "    print(key + \" maps into \" + value)\n",
        "```{admonition} Exercise\n",
        "Update the fruit dictionary with another two entries and then iterate through all of the entries printing each mapping using `.items()` as above.\n",
        "```\n",
        "## Loops and list comprehensions\n",
        "\n",
        "A loop is a way of executing a similar piece of code over and over in a similar way. The most useful loops are `for` loops and list comprehensions.\n",
        "\n",
        "A `for` loop does something *for* the time that the condition is satisfied. For example,\n",
        "name_list = [\"Lovelace\", \"Smith\", \"Pigou\", \"Babbage\"]\n",
        "\n",
        "for name in name_list:\n",
        "    print(name)\n",
        "prints out a name until all names have been printed out. Note the colon after the statement and before the indent.\n",
        "\n",
        "As long as your object is an iterable (ie you can iterate over it), then it can be used in this way in a for loop. The most common examples are lists and tuples, but you can also iterate over strings (in which case each character is selected in turn). One gotcha to be aware of is if you iterate over a string, say \"hello\", instead of iterating over a *list (or tuple) of strings*, eg `[\"hello\"]`. In the latter case, you get:\n",
        "for entry in [\"hello\"]:\n",
        "    print(entry)\n",
        "    print(\"---end entry---\")\n",
        "While in the former you get something quite different and typically not all that useful:\n",
        "for entry in \"hello\":\n",
        "    print(entry)\n",
        "    print(\"---end entry---\")\n",
        "```{admonition} Exercise\n",
        "Write a for loop that prints out \"coding for economists\" so that each word is printed in a successive iteration.\n",
        "```\n",
        "\n",
        "A useful trick with for loops is the `enumerate` keyword, which runs through an index that keeps track of the place of items in a list:\n",
        "name_list = [\"Lovelace\", \"Smith\", \"Hopper\", \"Babbage\"]\n",
        "\n",
        "for i, name in enumerate(name_list):\n",
        "    print(f\"The name in position {i} is {name}\")\n",
        "Remember, Python indexes from 0 so the first entry of `i` will be zero. But, if you'd like to index from a different number, you can:\n",
        "for i, name in enumerate(name_list, start=1):\n",
        "    print(f\"The name in position {i} is {name}\")\n",
        "Another useful pattern when doing for loops with dictionaries is iteration over key, value pairs. As we saw earlier, what distinguishes a dictionary in Python is that it maps a key to a value, for example \"apple\" might map to \"fruit\". Let's take our example from earlier that mapped cities to temperatures. If we wanted to iterate over *both* keys and values, we can write a for loop like this:\n",
        "cities_to_temps = {\"Paris\": 28, \"London\": 22, \"Seville\": 36, \"Wellesley\": 29}\n",
        "\n",
        "for key, value in cities_to_temps.items():\n",
        "    print(f\"In {key}, the temperature is {value} degrees C today.\")\n",
        "Note that we added `.items()` to the end of the dictionary. And note that we didn't *have* to call the key `key`, or the value `value`: these are set by their position. But part of best practice in writing code is that *there should be no surprises*, and writing key, value makes it really clear that you're using values from a dictionary.\n",
        "\n",
        "```{admonition} Exercise\n",
        "Write a dictionary that maps four cities you know into their respective countries and print the results using the `key, value` iteration trick.\n",
        "```\n",
        "\n",
        "Another useful type of for loop is provided by the `zip()` function. You can think of the `zip()` function as being like a zipper, bringing elements from two different iterators together in turn. Here's an example:\n",
        "first_names = [\"Ada\", \"Adam\", \"Grace\", \"Charles\"]\n",
        "last_names = [\"Lovelace\", \"Smith\", \"Hopper\", \"Babbage\"]\n",
        "\n",
        "for forename, surname in zip(first_names, last_names):\n",
        "    print(f\"{forename} {surname}\")\n",
        "The zip function is super useful in practice.\n",
        "\n",
        "```{admonition} Exercise\n",
        "Zip together the first names from above with this jumbled list of surnames: `['Babbage', 'Hopper', 'Smith', 'Lovelace']`.\n",
        "\n",
        "(Hint: you have seen a trick to help re-arrange lists earlier on in the Chapter.)\n",
        "```\n",
        "**List (and Other) Comprehensions**\n",
        "\n",
        "There's a second way to do loops in Python and, in most but [not all](https://towardsdatascience.com/list-comprehensions-vs-for-loops-it-is-not-what-you-think-34071d4d8207) [cases](https://stackoverflow.com/questions/22108488/are-list-comprehensions-and-functional-functions-faster-than-for-loops), they run faster. More importantly, and *this* is the reason it's good practice to use them where possible, they are very readable. They are called *list comprehensions*.\n",
        "\n",
        "List comprehensions can combine what a `for` loop and (if needed) what a `condition` do in a single line of code. First, let's look at a `for` loop that adds one to each value done as a list comprehension (NB: in practice, we would use super-fast **numpy** arrays for this kind of operation):\n",
        "num_list = range(50, 60)\n",
        "[1 + num for num in num_list]\n",
        "The general pattern is a bit similar to with the `for` loop but there are some differences. There's no colon, and no indenting. The syntax is \"do something with `x`\" then `for x in iterable`. Finally, the expression is wrapped in a `[` and `]` to make the output a list.\n",
        "\n",
        "Note that lists are not the only wrapping you can provide to this kind of structure. A `(` and `)` to make it a generator (don't worry about what this is for now), a `{` and `}` to make it a set (an object that only contains unique values), or it's possible to create a dictionary from a comprehension too! List comprehensions are the most common, so if you only remember one kind, remember them.\n",
        "\n",
        "```{admonition} Exercise\n",
        "Create a list comprehension that multiplies numbers in the range from 1 to 10 by 5.\n",
        "\n",
        "Did you get the range right?\n",
        "```\n",
        "\n",
        "Let's now see how to include a condition within a list comprehension. Say we had a list of numbers and wanted to filter it according to whether the numbers divided by 3 or not using the modulo operator:\n",
        "number_list = range(1, 40)\n",
        "divide_list = [x for x in number_list if x % 3 == 0]\n",
        "print(divide_list)\n",
        "The syntax here is do something to `x` for `x` in something if `x` satisfies some condition.\n",
        "\n",
        "Here's another example that picks out only the names that include 'Smith' in them:\n",
        "names_list = [\"Joe Bloggs\", \"Adam Smith\", \"Sandra Noone\", \"leonara smith\"]\n",
        "smith_list = [x for x in names_list if \"smith\" in x.lower()]\n",
        "print(smith_list)\n",
        "Note how we used 'smith' rather than 'Smith' and then used `lower()` to ensure we matched names regardless of the case they are written in.\n",
        "\n",
        "We can even do a whole `if` ... `else` construct *inside* a list comprehension:\n",
        "names_list = [\"Joe Bloggs\", \"Adam Smith\", \"Sandra Noone\", \"leonara smith\"]\n",
        "smith_list = [x if \"smith\" in x.lower() else \"Not Smith!\" for x in names_list]\n",
        "print(smith_list)\n",
        "Many of the constructs we've seen can be combined. For instance, there is no reason why we can't have a nested or repeated list comprehension using `zip()`, and, perhaps more surprisingly, sometimes these are useful!\n",
        "first_names = [\"Ada\", \"Adam\", \"Grace\", \"Charles\"]\n",
        "last_names = [\"Lovelace\", \"Smith\", \"Hopper\", \"Babbage\"]\n",
        "names_list = [x + \" \" + y for x, y in zip(first_names, last_names)]\n",
        "print(names_list)\n",
        "An even more extreme use of list comprehensions can deliver nested structures:\n",
        "first_names = [\"Ada\", \"Adam\"]\n",
        "last_names = [\"Lovelace\", \"Smith\"]\n",
        "names_list = [[x + \" \" + y for x in first_names] for y in last_names]\n",
        "print(names_list)\n",
        "This gives a nested structure that (in this case) iterates over `first_names` first, and then `last_names`. (Note that this object is a list of lists of strings!)\n",
        "\n",
        "Let's see a dictionary comprehension now. These look a bit similar to set comprehensions because they use `{` and `}` at either end but they are different because they come with a colon separating the keys from the values:\n",
        "{key: value for key, value in zip(first_names, last_names)}\n",
        "```{admonition} Exercise\n",
        "Create a nested list comprehension that results in a list of lists of strings equal to `[['a0', 'b0', 'c0'], ['a1', 'b1', 'c1'], ['a2', 'b2', 'c2']]` (ie a combination of the first three integers and letters of the alphabet). You may find that you need to convert numbers to strings using `str(x)` to do this.\n",
        "```\n",
        "\n",
        "If you'd like to learn more about list comprehensions, check out these [short video tutorials](https://calmcode.io/comprehensions/introduction.html).\n",
        "\n",
        "## Writing Functions\n",
        "\n",
        "Declaring a function starts with a `def` keyword for 'define a function'. It then has a name, followed by brackets, `()`, which may contain *function arguments* and *function keyword arguments*. This is followed by a colon. The body of the function is then indented relative to the left-most text. Function arguments are defined in brackets following the name, with different inputs separated by commas. Any outputs are given with the `return` keyword, again with different variables separated by commas.\n",
        "\n",
        "```{admonition} Arguments and keyword arguments\n",
        ":class: tip\n",
        "\n",
        "*arguments* are the variables that functions *always* need, so `a` and `b` in `def add(a, b): return a + b`. The function won't work without them! Function arguments are sometimes referred to as *args*.\n",
        "\n",
        "*Keyword arguments* are the variables that are optional for functions, so `c` in `def add(a, b, c=5): return a + b - c`. If you do not provide a value for `c` when calling the function, it will automatically revert to `c=5`. Keyword arguments are sometimes referred to as *kwargs*.\n",
        "```\n",
        "\n",
        "Let's see a very simple example of a function with a single *argument* (or arg):\n",
        "def welcome_message(name):\n",
        "    return f\"Hello {name}, and welcome!\"\n",
        "\n",
        "\n",
        "# Without indentation, this code is not part of function\n",
        "name = \"Ada\"\n",
        "output_string = welcome_message(name)\n",
        "print(output_string)\n",
        "One powerful feature of functions is that we can define defaults for the input arguments. These are called *keyword arguments* (or kwargs). Let's see that in action by defining a default value for `name`, along with multiple outputs--a hello message and a score.\n",
        "def score_message(score, name=\"student\"):\n",
        "    \"\"\"This is a doc-string, a string describing a function.\n",
        "    Args:\n",
        "        score (float): Raw score\n",
        "        name (str): Name of student\n",
        "    Returns:\n",
        "        str: A hello message.\n",
        "        float: A normalised score.\n",
        "    \"\"\"\n",
        "    norm_score = (score - 50) / 10\n",
        "    return f\"Hello {name}\", norm_score\n",
        "\n",
        "\n",
        "# Without indentation, this code is not part of function\n",
        "name = \"Ada\"\n",
        "score = 98\n",
        "# No name entered\n",
        "print(score_message(score))\n",
        "# Name entered\n",
        "print(score_message(score, name=name))\n",
        "```{admonition} Exercise\n",
        "What is the return type of a function with multiple return values separated by commas following the `return` statement?\n",
        "```\n",
        "\n",
        "In that last example, you'll notice that we added some text to the function. This is a doc-string, or documentation string. It's there to help users (and, most likely, future you) to understand what the function does. Let's see how this works in action by calling `help()` on the `score_message` function:\n",
        "help(score_message)\n",
        "```{admonition} Exercise\n",
        "Write a function that returns a high five unicode character if the input is equal to \"coding for economists\" and a sad face, \":-/\" otherwise.\n",
        "\n",
        "Add a second argument that takes a default argument of an empty string but, if used, is added (concatenated) to the return message. Use it to create the return output, \":-/ here is my message.\"\n",
        "\n",
        "Write a doc-string for your function and call `help` on it.\n",
        "```\n",
        "\n",
        "To learn more about args and kwargs, check out these [short video tutorials](https://calmcode.io/args-kwargs/introduction.html).\n",
        "## Scope\n",
        "\n",
        "Scope refers to what parts of your code can see what other parts. There are three different scopes to bear in mind: local, global, and non-local.\n",
        "\n",
        "**Local**\n",
        "\n",
        "If you define a variable inside a function, the rest of your code won't be able to 'see' it or use it. For example, here's a function that creates a variable and then an example of calling that variable:\n",
        "\n",
        "```python\n",
        "def var_func():\n",
        "    str_variable = 'Hello World!'\n",
        "\n",
        "var_func()\n",
        "print(str_variable)\n",
        "```\n",
        "\n",
        "This would raise an error, because as far as your general code is concerned `str_variable` doesn't exist outside of the function. This is an example of a *local* variable, one that only exists within a function.\n",
        "\n",
        "\n",
        "If you want to create variables inside a function and have them persist, you need to explicitly pass them out using, for example `return str_variable` like this:\n",
        "def var_func():\n",
        "    str_variable = \"Hello World!\"\n",
        "    return str_variable\n",
        "\n",
        "\n",
        "returned_var = var_func()\n",
        "print(returned_var)\n",
        "**Global**\n",
        "\n",
        "A variable declared outside of a function is known as a global variable because it is accessible everywhere:\n",
        "y = \"I'm a global variable\"\n",
        "\n",
        "def print_y():\n",
        "    print(\"y is inside a function:\", y)\n",
        "\n",
        "\n",
        "print_y()\n",
        "print(\"y is outside a function:\", y)\n",
        "This is just a taster of what can be done using base Python with few extra packages. For more, especially if you've done other chapters in the book already and want to go a bit deeper, see the Chapter on {ref}`code-advanced`. Otherwise, head on to the next chapter!\n",
        "\n",
        "## Lecture02\n"
      ],
      "id": "e7e51dcb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "df = pd.read_csv(\"seattle_pet_licenses.csv\")\n",
        "df"
      ],
      "id": "f8a35928",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Questions:How many pets are included in this dataset?\n",
        "The answer: 66042\n",
        "Questions:How many variables do we have for each pet?\n",
        "The answer: 7 variables\n"
      ],
      "id": "70628f87"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df.info()\n",
        "df['animal_s_name'].value_counts().head(3)"
      ],
      "id": "88a1e247",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Questions:What are the three most common pet names in Seattle? \n",
        "The answer: LucyãBellaãCharlie\n",
        "\n",
        "\n",
        "## Lecture03\n",
        "### 1\n"
      ],
      "id": "b50c8849"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "url ='https://raw.githubusercontent.com/tidyverse/datascience-box/refs/heads/main/course-materials/lab-instructions/lab-03/data/nobel.csv'\n",
        "df = pd.read_csv(url)\n",
        "print(df.head())\n",
        "df"
      ],
      "id": "b5c0c97d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Questions:How many observations and how many variables are in the dataset? What does each row represent?\n",
        "The answer: 935 observations, 26 variables, and one row for each person.\n"
      ],
      "id": "2561c0a7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df.info()\n",
        "print(df)\n",
        "nobel_living = df[\n",
        "    (df['country'].notna()) &  \n",
        "    (df['gender'] != 'org') &  \n",
        "    (df['died_date'].isna())  \n",
        "]\n",
        "print(nobel_living)"
      ],
      "id": "babdf15e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Questions:Where were most Nobel laureates based when they won their prizes?\n",
        "The answer: USA\n",
        "\n",
        "### 2\n"
      ],
      "id": "945b9034"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "url ='https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv'\n",
        "df = pd.read_csv(url)\n",
        "print(df.head())\n",
        "df"
      ],
      "id": "c0486a49",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df.info()\n",
        "from skimpy import clean_columns\n",
        "df = clean_columns(df,case=\"snake\")\n",
        "print(df.columns)\n",
        "df.fillna(\"-\")\n",
        "df.describe()\n",
        "sum_table = df.describe().round(2)\n",
        "sum_table\n",
        "df.dropna()"
      ],
      "id": "0d8512dd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Lectyre04\n"
      ],
      "id": "80ea8b5c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "df = pd.read_csv(\"all-ages.csv\")\n",
        "df\n",
        "result = df.groupby([\"Major\"]).sum().sort_values([\"Unemployment_rate\"])\n",
        "print(result)"
      ],
      "id": "8c078752",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "### æç§ä¸ä¸åç»ï¼å¹¶æå¤±ä¸çä»ä½å°é«ååºæå\n",
        "import pandas as pd\n",
        "df = pd.read_csv('recent-grads.csv')\n",
        "df"
      ],
      "id": "da81e761",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "result = df.groupby([\"Major\"]).sum().sort_values([\"ShareWomen\"],ascending=False)\n",
        "print(result)\n"
      ],
      "id": "2e24ca3c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "### æç§ä¸ä¸åç»ï¼å°å¥³çå æ¯ä»é«å°ä½éåºæå\n",
        "import pandas as pd\n",
        "df = pd.read_csv('recent-grads.csv')\n",
        "df\n",
        "result = df.groupby([\"Major\"]).sum().sort_values([\"ShareWomen\"],ascending=False)\n",
        "print(result)"
      ],
      "id": "f73e7eab",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "### æç§ä¸ä¸åç»ï¼å°å¥³çå æ¯ä»é«å°ä½éåºæå\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "a=df['Median'].groupby(df['Major_category']).sum()\n",
        "a.plot.bar()\n",
        "plt.show()"
      ],
      "id": "2210ce1c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Questions:What should I major in?\n",
        "\n",
        "The answer: Engineering\n",
        "\n",
        "\n",
        "## Lectyre05\n"
      ],
      "id": "1f821da7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "from lets_plot import *\n",
        "LetsPlot.setup_html()"
      ],
      "id": "11e53c8d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df = pd.read_csv('plastic-waste.csv')\n",
        "df_clean = df.dropna(subset=['plastic_waste_per_cap', 'continent'])"
      ],
      "id": "4c1bef50",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Quenstion1:Plot, using histograms, the distribution of plastic waste per capita faceted by continent. What can you say about how the continents compare to each other in terms of their plastic waste per capita?\n",
        "The answer:With the histogram, it is possible to observe differences in the per capita distribution of plastic waste across continents. For example, Africa shows a higher peak waste output and North America shows a wider distribution.\n"
      ],
      "id": "e03c4cc7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create histograms faceted by continent\n",
        "p_histogram = ggplot(df_clean, aes(x='plastic_waste_per_cap')) + \\\n",
        "    geom_histogram(bins=30, fill='blue', color='black', alpha=0.7) + \\\n",
        "    facet_wrap('continent') + \\\n",
        "    ggtitle('Distribution of Plastic Waste per Capita by Continent') + \\\n",
        "    xlab('Plastic Waste per Capita') + \\\n",
        "    ylab('Frequency')\n",
        "\n",
        "\n",
        "p_histogram.show()"
      ],
      "id": "a9f864e0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Quenstion2:Convert your side-by-side box plots from the previous task to violin plots. What do the violin plots reveal that box plots do not? What features are apparent in the box plots but not in the violin plots?\n",
        "The answer:Fiddle plots show the complete distribution of the data, showing the shape of the data and multiple peaks in the graph. Box plots provide explicit statistical information that violin plots only reflect through shape.\n"
      ],
      "id": "857eac78"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Violin plots\n",
        "p_violin = ggplot(df, aes(x='continent', y='plastic_waste_per_cap', fill='continent')) + \\\n",
        "    geom_violin(alpha=0.7) + \\\n",
        "    geom_boxplot(width=0.1, fill='white', color='black') + \\\n",
        "    ggtitle('Violin Plot of Plastic Waste per Capita by Continent') + \\\n",
        "    xlab('Continent') + \\\n",
        "    ylab('Plastic Waste per Capita')\n",
        "\n",
        "p_violin.show()"
      ],
      "id": "f825f6f6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Quenstion3:Visualize the relationship between plastic waste per capita and mismanaged plastic waste per capita using a scatterplot. Describe the relationship.\n",
        "The answer:The scatter plot presents the relationship between plastic waste per capita and poorly managed waste per capita, checking if there is a positive or other relationship.\n"
      ],
      "id": "71933641"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Scatterplot\n",
        "if 'mismanaged_plastic_waste_per_cap' in df.columns:\n",
        "    p_scatter = ggplot(df, aes(x='plastic_waste_per_cap', y='mismanaged_plastic_waste_per_cap')) + \\\n",
        "        geom_point(size=3, alpha=0.6) + \\\n",
        "        ggtitle('Plastic Waste vs. Mismanaged Plastic Waste per Capita') + \\\n",
        "        xlab('Plastic Waste per Capita') + \\\n",
        "        ylab('Mismanaged Plastic Waste per Capita')\n",
        "    \n",
        "    p_scatter.show()"
      ],
      "id": "4627ded8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Quenstion4:Colour the points in the scatterplot by continent. Does there seem to be any clear distinctions between continents with respect to how plastic waste per capita and mismanaged plastic waste per capita are associated?\n",
        "The answer:By distinguishing continents by color, it is possible to observe differences between continents. Certain continents may exhibit specific patterns or clusters, such as the gradual rise of Africa.\n"
      ],
      "id": "9b7a5450"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Colored scatterplot\n",
        "p_scatter_colored = ggplot(df, aes(x='plastic_waste_per_cap', y='mismanaged_plastic_waste_per_cap', color='continent')) + \\\n",
        "    geom_point(size=3, alpha=0.6) + \\\n",
        "    ggtitle('Plastic Waste vs. Mismanaged Plastic Waste per Capita by Continent') + \\\n",
        "    xlab('Plastic Waste per Capita') + \\\n",
        "    ylab('Mismanaged Plastic Waste per Capita')\n",
        "\n",
        "p_scatter_colored.show()"
      ],
      "id": "b41602e4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Quenstion5:Visualize the relationship between plastic waste per capita and total population as well as plastic waste per capita and coastal population. You will need to make two separate plots. Do either of these pairs of variables appear to be more strongly linearly associated?\n",
        "The answer:The visualization of the relationship between the two demographic variables shows the association between plastic waste per capita and total population and coastal population. Through scatterplot analysis, plastic waste per capita exhibits a stronger linear relationship with coastal population.\n"
      ],
      "id": "67222305"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plastic waste per capita vs Total population\n",
        "p_pop_scatter = ggplot(df, aes(x='plastic_waste_per_cap', y='total_pop', color='continent')) + \\\n",
        "    geom_point(size=3, alpha=0.6) + \\\n",
        "    ggtitle('Plastic Waste per Capita vs. Total Population') + \\\n",
        "    xlab('Plastic Waste per Capita') + \\\n",
        "    ylab('Total Population')\n",
        "\n",
        "p_pop_scatter.show()"
      ],
      "id": "bdcd4066",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plastic waste per capita vs Coastal population\n",
        "p_coastal_scatter = ggplot(df, aes(x='plastic_waste_per_cap', y='coastal_pop', color='continent')) + \\\n",
        "    geom_point(size=3, alpha=0.6) + \\\n",
        "    ggtitle('Plastic Waste per Capita vs. Coastal Population') + \\\n",
        "    xlab('Plastic Waste per Capita') + \\\n",
        "    ylab('Coastal Population')\n",
        "\n",
        "p_coastal_scatter.show()"
      ],
      "id": "ee01cc14",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "p_coastal_scatter = ggplot(df, aes(x='coastal_pop', y='plastic_waste_per_cap', color='continent')) + \\\n",
        "    geom_point(size=3, alpha=0.6) + \\\n",
        "    ggtitle('Coastal Population vs. Plastic Waste per Capita') + \\\n",
        "    xlab('coastal pop') + \\\n",
        "    ylab('plastic waste per cap')\n",
        "\n",
        "p_coastal_scatter.show()"
      ],
      "id": "8d059dc6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "p_coastal_scatter.show()\n",
        "df['coastal_population_proportion'] = df['coastal_pop'] / df['total_pop']\n",
        "df_filtered = df\n",
        "df_filtered = df_filtered[(df_filtered['plastic_waste_per_cap'] <= 0.6) & \n",
        "(df_filtered['coastal_population_proportion'] <= 1.6)]\n",
        "p_scatter = ggplot(df_filtered, aes(x='coastal_population_proportion', y='plastic_waste_per_cap', color='continent')) + \\\n",
        "    geom_point(size=3, alpha=0.7) + \\\n",
        "    geom_smooth(method='lm', color='black', se=True, linetype='solid', size=1) + \\\n",
        "    ggtitle('Plastic Waste per Capita vs Coastal Population Proportion') + \\\n",
        "    xlab('Coastal Population Proportion') + \\\n",
        "    ylab('Plastic Waste per Capita')\n",
        "\n",
        "\n",
        "p_scatter.show()"
      ],
      "id": "fda83d9b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Practical\n",
        "\n",
        "## Practical01\n"
      ],
      "id": "f1aefa00"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#%pip install pandas matplotlib numpy pathlib pingouin lets_plot\n",
        "import pandas as pd\n",
        "import matplotlib as mpl\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from pathlib import Path\n",
        "#import pingouin as pg\n",
        "from lets_plot import *\n",
        "\n",
        "LetsPlot.setup_html(no_js=True)\n",
        "\n",
        "### You don't need to use these settings yourself,\n",
        "### they are just here to make the charts look nicer!\n",
        "# Set the plot style for prettier charts:\n",
        "plt.style.use(\n",
        "    \"https://raw.githubusercontent.com/aeturrell/core_python/main/plot_style.txt\"\n",
        ")"
      ],
      "id": "c120eab2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Questions:Explain in your own words what temperature âanomaliesâ are. Why have researchers chosen this particular measure over other measures (such as absolute temperature)?\n",
        "The answer:\n",
        "(1)A temperature \"anomaly\" is typically defined as a temperature that falls outside the normal range or expected value, suggesting the potential for an underlying issue or change. In contrast, absolute temperature represents the average kinetic energy of molecular motion and is expressed in Kelvins (K).\n",
        "(2)Researchers select temperature \"anomalies\" over absolute temperatures due to their greater practicality, intuitiveness, ease of comprehension, suitability for comparison with normal conditions, and adaptability to diverse research fields and objectives.\n"
      ],
      "id": "d5f23af8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df = pd.read_csv(\"NH.Ts+dSST.csv\", skiprows=1)\n",
        "df.head()"
      ],
      "id": "afe31da5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df.info()"
      ],
      "id": "52c2606c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df = pd.read_csv(\"NH.Ts+dSST.csv\", skiprows=1)\n",
        "df.info()"
      ],
      "id": "fbd8b7ec",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "print(df.head())"
      ],
      "id": "40035424",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Questions:Try importing the data again without using the keyword argument option na_values=\"***\" at all and see what difference it makes.\n",
        "The answer: By comparing the output of.info(), you can see the difference in importing the data without parameters. Some columns may be recognized as object instead of float64 or int64, which usually means they contain non-numeric characters.\n"
      ],
      "id": "7044e878"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df = pd.read_csv(\"NH.Ts+dSST.csv\", skiprows=1)\n",
        "df.head()"
      ],
      "id": "daaf748c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df.info()"
      ],
      "id": "c2d34229",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df = df.set_index(\"Year\")\n",
        "df.head()"
      ],
      "id": "2dfe8f2e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df.tail()"
      ],
      "id": "04e4fe16",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig, ax = plt.subplots()\n",
        "df[\"Jan\"].plot(ax=ax)\n",
        "ax.set_ylabel(\"y label\")\n",
        "ax.set_xlabel(\"x label\")\n",
        "ax.set_title(\"title\")\n",
        "plt.show()"
      ],
      "id": "573d7b72",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig, ax = plt.subplots()\n",
        "ax.plot(df.index, df[\"Jan\"])\n",
        "ax.set_ylabel(\"y label\")\n",
        "ax.set_xlabel(\"x label\")\n",
        "ax.set_title(\"title\")\n",
        "plt.show()"
      ],
      "id": "515678d4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "plt.show()\n",
        "plt.savefig(\"name-of-chart.pdf\")\n",
        "month = \"Jan\"\n",
        "fig, ax = plt.subplots()\n",
        "ax.axhline(0, color=\"orange\")\n",
        "ax.annotate(\"1951â1980 average\", xy=(0.66, -0.2), xycoords=(\"figure fraction\", \"data\"))\n",
        "df[month].plot(ax=ax)\n",
        "ax.set_title(\n",
        "    f\"Average temperature anomaly in {month} \\n in the northern hemisphere (1880â{df.index.max()})\"\n",
        ")\n",
        "ax.set_ylabel(\"Annual temperature anomalies\")"
      ],
      "id": "e297a06d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Extra practice:Extra practice: The columns labelled DJF, MAM, JJA, and SON contain seasonal averages (means). For example, the MAM column contains the average of the March, April, and May columns for each year. Plot a separate line chart for each season, using average temperature anomaly for that season on the vertical axis and time (from 1880 to the latest year available) on the horizontal axis.\n",
        "The answer:\n"
      ],
      "id": "a9ea959f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "month = \"Jan\"\n",
        "fig, ax = plt.subplots()\n",
        "ax.axhline(0, color=\"red\")\n",
        "ax.annotate(\"1951â1980 average\",  xy=(1.96, -1.5),xycoords=(\"figure fraction\", \"data\"))\n",
        "df[month].plot(ax=ax)\n",
        "ax.set_title(\n",
        "    f\"Average temperature anomaly in {month} \\n in the northern hemisphere (1880â{df.index.max()})\"\n",
        ")\n",
        "ax.set_ylabel(\"Annual temperature anomalies\")"
      ],
      "id": "b9e280bf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "month = \"MAM\"\n",
        "fig, ax = plt.subplots()\n",
        "ax.axhline(0, color=\"orange\")\n",
        "ax.annotate(\"1951â1980 average\", xy=(0.66, -0.2), xycoords=(\"figure fraction\", \"data\"))\n",
        "df[month].plot(ax=ax)\n",
        "ax.set_title(\n",
        "    f\"Average temperature anomaly in {month} \\n in the northern hemisphere (1880â{df.index.max()})\"\n",
        ")\n",
        "ax.set_ylabel(\"Annual temperature anomalies\")"
      ],
      "id": "00ae92f3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "month = \"JJA\"\n",
        "fig, ax = plt.subplots()\n",
        "ax.axhline(0, color=\"orange\")\n",
        "ax.annotate(\"1951â1980 average\", xy=(0.66, -0.2), xycoords=(\"figure fraction\", \"data\"))\n",
        "df[month].plot(ax=ax)\n",
        "ax.set_title(\n",
        "    f\"Average temperature anomaly in {month} \\n in the northern hemisphere (1880â{df.index.max()})\"\n",
        ")\n",
        "ax.set_ylabel(\"Annual temperature anomalies\")"
      ],
      "id": "9cbea7c0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Questions:What do your charts from Questions 2 to 4(a) suggest about the relationship between temperature and time?\n",
        "The answer: Temperature increases with time.\n"
      ],
      "id": "5f0f8b56"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "month = \"J-D\"\n",
        "fig, ax = plt.subplots()\n",
        "ax.axhline(0, color=\"orange\")\n",
        "ax.annotate(\"1951-1980 average\", xy=(0.68, -0.2), xycoords=(\"figure fraction\", \"data\"))\n",
        "df[month].plot(ax=ax)\n",
        "ax.set_title(\n",
        "    f\"Average annual temperature anomaly in \\n in the northern hemisphere (1880-{df.index.max()})\"\n",
        ")\n",
        "ax.set_ylabel(\"Annual temperature anomalies\")"
      ],
      "id": "688e50ca",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Questions:Discuss the similarities and differences between the charts. (For example, are the horizontal and vertical axes variables the same, or do the lines have the same shape?)\n",
        "The answer:\n",
        "(1)Similaritie:The temperature changes with time, and the overall trend is upward.\n",
        "(2)Differences:The horizontal and vertical axis variables of the two tables are different. For example, in 2000, Figure 1.4 shows a temperature of 0.5 and Figure 1.5 shows a temperature of 0.6.\n",
        "Questions:Looking at the behaviour of temperature over time from 1000 to 1900 in Figure 1.4, are the observed patterns in your chart unusual?\n",
        "The answer:From 1000 to 1900, the temperature fluctuate up and down with time, but the maximum value did not exceed 0.0, which indicates that the temperature change during this period was relatively small compared to the significant increase in industrial temperature after 1900, which I think is normal.\n",
        "\n",
        "Questions:Based on your answers to Questions 4 and 5, do you think the government should be concerned about climate change?\n",
        "The answer:My point of view is that according to the chart data, the temperature is rising, which is a sign of global warming, so the government should pay attention to climate change.\n"
      ],
      "id": "2e2725ba"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df[\"Period\"] = pd.cut(\n",
        "    df.index,\n",
        "    bins=[1921, 1950, 1980, 2010],\n",
        "    labels=[\"1921â1950\", \"1951â1980\", \"1981â2010\"],\n",
        "    ordered=True,\n",
        ")\n",
        "df[\"Period\"].tail(20)"
      ],
      "id": "bef3d408",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "list_of_months = [\"Jun\", \"Jul\", \"Aug\"]\n",
        "df[list_of_months].stack().head()"
      ],
      "id": "e149b1ee",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig, axes = plt.subplots(ncols=3, figsize=(9, 4), sharex=True, sharey=True)\n",
        "for ax, period in zip(axes, df[\"Period\"].dropna().unique()):\n",
        "    df.loc[df[\"Period\"] == period, list_of_months].stack().hist(ax=ax)\n",
        "    ax.set_title(period)\n",
        "plt.suptitle(\"Histogram of temperature anomalies\")\n",
        "axes[1].set_xlabel(\"Summer temperature distribution\")\n",
        "plt.tight_layout()"
      ],
      "id": "b7924d4f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create a variable that has years 1951 to 1980, and months Jan to Dec (inclusive)\n",
        "temp_all_months = df.loc[(df.index >= 1951) & (df.index <= 1980), \"Jan\":\"Dec\"]\n",
        "# Put all the data in stacked format and give the new columns sensible names\n",
        "temp_all_months = (\n",
        "    temp_all_months.stack()\n",
        "    .reset_index()\n",
        "    .rename(columns={\"level_1\": \"month\", 0: \"values\"})\n",
        ")\n",
        "# Take a look at this data:\n",
        "temp_all_months"
      ],
      "id": "55ed8a9b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "quantiles = [0.3, 0.7]\n",
        "list_of_percentiles = np.quantile(temp_all_months[\"values\"], q=quantiles)\n",
        "\n",
        "print(f\"The cold threshold of {quantiles[0]*100}% is {list_of_percentiles[0]}\")\n",
        "print(f\"The hot threshold of {quantiles[1]*100}% is {list_of_percentiles[1]}\")"
      ],
      "id": "03c426b8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create a variable that has years 1981 to 2010, and months Jan to Dec (inclusive)\n",
        "temp_all_months = df.loc[(df.index >= 1981) & (df.index <= 2010), \"Jan\":\"Dec\"]\n",
        "# Put all the data in stacked format and give the new columns sensible names\n",
        "temp_all_months = (\n",
        "    temp_all_months.stack()\n",
        "    .reset_index()\n",
        "    .rename(columns={\"level_1\": \"month\", 0: \"values\"})\n",
        ")\n",
        "# Take a look at the start of this data data:\n",
        "temp_all_months.head()"
      ],
      "id": "7a23b367",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "entries_less_than_q30 = temp_all_months[\"values\"] < list_of_percentiles[0]\n",
        "proportion_under_q30 = entries_less_than_q30.mean()\n",
        "print(\n",
        "    f\"The proportion under {list_of_percentiles[0]} is {proportion_under_q30*100:.2f}%\"\n",
        ")"
      ],
      "id": "d6544f60",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "proportion_over_q70 = (temp_all_months[\"values\"] > list_of_percentiles[1]).mean()\n",
        "print(f\"The proportion over {list_of_percentiles[1]} is {proportion_over_q70*100:.2f}%\")"
      ],
      "id": "f4ece8b2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "temp_all_months = (\n",
        "    df.loc[:, \"DJF\":\"SON\"]\n",
        "    .stack()\n",
        "    .reset_index()\n",
        "    .rename(columns={\"level_1\": \"Season\", 0: \"Values\"})\n",
        ")\n",
        "temp_all_months[\"Period\"] = pd.cut(\n",
        "    temp_all_months[\"Year\"],\n",
        "    bins=[1921, 1950, 1980, 2010],\n",
        "    labels=[\"1921â1950\", \"1951â1980\", \"1981â2010\"],\n",
        "    ordered=True,\n",
        ")\n",
        "# Take a look at a cut of the data using `.iloc`, which provides position\n",
        "temp_all_months.iloc[-135:-125]"
      ],
      "id": "551db48b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Questions:Calculate the mean (average) and variance separately for the following time periods: 1921â1950, 1951â1980, and 1981â2010.\n",
        "The answer:The variance of the later period is significantly higher than that of the earlier period, which indicates that the air temperature becomes more variable.\n"
      ],
      "id": "d2a985a1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "seasons = {\n",
        "    \"DJF\": [\"Dec\", \"Jan\", \"Feb\"],\n",
        "    \"MAM\": [\"Mar\", \"Apr\", \"May\"],\n",
        "    \"JJA\": [\"Jun\", \"Jul\", \"Aug\"],\n",
        "    \"SON\": [\"Sep\", \"Oct\", \"Nov\"]\n",
        "}\n",
        "for season, months in seasons.items():\n",
        "    if all(month in df.columns for month in months):\n",
        "        df[season] = df[months].mean(axis=1)\n",
        "periods = {\n",
        "    \"1921-1950\": (1921, 1950),\n",
        "    \"1951-1980\": (1951, 1980),\n",
        "    \"1981-2010\": (1981, 2010)\n",
        "}\n",
        "results = {}\n",
        "for season in seasons.keys():\n",
        "    if season in df.columns:\n",
        "        results[season] = {}\n",
        "        for period, (start_year, end_year) in periods.items():\n",
        "            period_data = df.loc[start_year:end_year, season]\n",
        "            results[season][period] = {\n",
        "                \"mean\": period_data.mean(),\n",
        "                \"variance\": period_data.var(),\n",
        "            }\n",
        "for season, period_results in results.items():\n",
        "    print(f\"Season: {season}\")\n",
        "    for period, stats in period_results.items():\n",
        "        print(f\"  Period: {period}\")\n",
        "        print(f\"    Mean: {stats['mean']:.2f}\")\n",
        "        print(f\"    Variance: {stats['variance']:.2f}\")\n",
        "    print()"
      ],
      "id": "103c1141",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "temp_all_months = (\n",
        "    df.loc[:, \"DJF\":\"SON\"]\n",
        "    .stack()\n",
        "    .reset_index()\n",
        "    .rename(columns={\"level_1\": \"Season\", 0: \"Values\"})\n",
        ")\n",
        "temp_all_months[\"Period\"] = pd.cut(\n",
        "    temp_all_months[\"Year\"],\n",
        "    bins=[1921, 1950, 1980, 2010],\n",
        "    labels=[\"1921â1950\", \"1951â1980\", \"1981â2010\"],\n",
        "    ordered=True,\n",
        ")\n",
        "# Take a look at a cut of the data using `.iloc`, which provides position\n",
        "temp_all_months.iloc[-135:-125]"
      ],
      "id": "bfec0f46",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "grp_mean_var = temp_all_months.groupby([\"Season\", \"Period\"])[\"Values\"].agg(\n",
        "    [np.mean, np.var]\n",
        ")\n",
        "grp_mean_var"
      ],
      "id": "c80b33ff",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "min_year = 1880\n",
        "(\n",
        "    ggplot(temp_all_months, aes(x=\"Year\", y=\"Values\", color=\"Season\"))\n",
        "    + geom_abline(slope=0, color=\"black\", size=1)\n",
        "    + geom_line(size=1)\n",
        "    + labs(\n",
        "        title=f\"Average annual temperature anomaly in \\n in the northern hemisphere ({min_year}â{temp_all_months['Year'].max()})\",\n",
        "        y=\"Annual temperature anomalies\",\n",
        "    )\n",
        "    + scale_x_continuous(format=\"d\")\n",
        "    + geom_text(\n",
        "        x=min_year, y=0.1, label=\"1951â1980 average\", hjust=\"left\", color=\"black\"\n",
        "    )\n",
        ")"
      ],
      "id": "0abe5d2e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Questions:Using the findings of the New York Times article and your answers to Questions 1 to 5, discuss whether temperature appears to be more variable over time. Would you advise the government to spend more money on mitigating the effects of extreme weather events?\n",
        "The answer:As temperatures change more over time due to global warming, heat extremes are becoming more frequent and damaging. First, I suggest that the government should spend more money to alleviate the impact of extreme weather events on people's lives, such as expanding the urban green area. Second, we will advocate low-carbon travel and life for the people.\n"
      ],
      "id": "5122d054"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df_co2 = pd.read_csv(r\"1_C02-data.csv\")\n",
        "df_co2.head()"
      ],
      "id": "c5391f66",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df_co2_june = df_co2.loc[df_co2[\"Month\"] == 6]\n",
        "df_co2_june.head()"
      ],
      "id": "a6e727c2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df_temp_co2 = pd.merge(df_co2_june, df, on=\"Year\")\n",
        "df_temp_co2[[\"Year\", \"Jun\", \"Trend\"]].head()"
      ],
      "id": "afe9fa9a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "(\n",
        "    ggplot(df_temp_co2, aes(x=\"Jun\", y=\"Trend\"))\n",
        "    + geom_point(color=\"black\", size=3)\n",
        "    + labs(\n",
        "        title=\"Scatterplot of temperature anomalies vs carbon dioxide emissions\",\n",
        "        y=\"Carbon dioxide levels (trend, mole fraction)\",\n",
        "        x=\"Temperature anomaly (degrees Celsius)\",\n",
        "    )\n",
        ")"
      ],
      "id": "afc82e0a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df_temp_co2[[\"Jun\", \"Trend\"]].corr(method=\"pearson\")"
      ],
      "id": "bafce7c3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "(\n",
        "    ggplot(df_temp_co2, aes(x=\"Year\", y=\"Jun\"))\n",
        "    + geom_line(size=1)\n",
        "    + labs(\n",
        "        title=\"June temperature anomalies\",\n",
        "    )\n",
        "    + scale_x_continuous(format=\"d\")\n",
        ")"
      ],
      "id": "2f993044",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "base_plot = ggplot(df_temp_co2) + scale_x_continuous(format=\"d\")\n",
        "plot_p = (\n",
        "    base_plot\n",
        "    + geom_line(aes(x=\"Year\", y=\"Jun\"), size=1)\n",
        "    + labs(title=\"June temperature anomalies\")\n",
        ")\n",
        "plot_q = (\n",
        "    base_plot\n",
        "    + geom_line(aes(x=\"Year\", y=\"Trend\"), size=1)\n",
        "    + labs(title=\"Carbon dioxide emissions\")\n",
        ")\n",
        "gggrid([plot_p, plot_q], ncol=2)"
      ],
      "id": "f07ce285",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Extra practice: Choose two months and add the CO2 trend data to the temperature dataset from Part 1.1, making sure that the data corresponds to the correct year. Create a separate chart for each month. \n",
        "The answer:\n"
      ],
      "id": "a7b8496c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df_co2_june = df_co2.loc[df_co2[\"Month\"] == 3]\n",
        "df_co2_june.head()"
      ],
      "id": "1b0c9c06",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df_temp_co2 = pd.merge(df_co2_june, df, on=\"Year\")\n",
        "df_temp_co2[[\"Year\", \"Mar\", \"Trend\"]].head()"
      ],
      "id": "6d5d7e31",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "(\n",
        "    ggplot(df_temp_co2, aes(x=\"Mar\", y=\"Trend\"))\n",
        "    + geom_point(color=\"red\", size=3)\n",
        "    + labs(\n",
        "        title=\"Scatterplot of temperature anomalies vs carbon dioxide emissions\",\n",
        "        y=\"Carbon dioxide levels (trend, mole fraction)\",\n",
        "        x=\"Temperature anomaly (degrees Celsius)\",\n",
        "    )\n",
        ")"
      ],
      "id": "18b1c360",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df_co2_june = df_co2.loc[df_co2[\"Month\"] == 9]\n",
        "df_co2_june.head()"
      ],
      "id": "caf991f4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df_temp_co2 = pd.merge(df_co2_june, df, on=\"Year\")\n",
        "df_temp_co2[[\"Year\", \"Sep\", \"Trend\"]].head()"
      ],
      "id": "773ac2f7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "(\n",
        "    ggplot(df_temp_co2, aes(x=\"Sep\", y=\"Trend\"))\n",
        "    + geom_point(color=\"blue\", size=3)\n",
        "    + labs(\n",
        "        title=\"Scatterplot of temperature anomalies vs carbon dioxide emissions\",\n",
        "        y=\"Carbon dioxide levels (trend, mole fraction)\",\n",
        "        x=\"Temperature anomaly (degrees Celsius)\",\n",
        "    )\n",
        ")"
      ],
      "id": "d97caf47",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Questions:What do your charts and the correlation coefficients suggest about the relationship between CO2 levels and temperature anomalies?\n",
        "\n",
        "The answer:CO2 levels and temperature have strongly correlated with each other.\n",
        "Questions:Consider the example of spurious correlation described above.\n",
        "Questions:(1)In your own words, explain spurious correlation and the difference between correlation and causation.\n",
        "\n",
        "The answer:Spurious correlation: When two things seem linked but aren't really, often due to a hidden factor.Correlation vs causation: Correlation shows a link, but causation means one thing causes another.\n",
        "\n",
        "Questions:(2)Give an example of spurious correlation, similar to the one above, for either CO2 levels or temperature anomalies.\n",
        "\n",
        "The answer:\n",
        "Example: CO2 Levels and Stock Market Performance.It might seem that there's a correlation between rising CO2 levels in the atmosphere and improved stock market performance. However, this doesn't mean that CO2 levels are directly causing the stock market to rise. Instead, both could be influenced by a common factor, such as economic growth. As economies grow, they often emit more CO2 and also tend to have better stock market performance.\n",
        "\n",
        "Questions:(3)Choose an example of spurious correlation from Tyler Vigenâs website. Explain whether you think it is a coincidence, or whether this correlation could be due to one or more other variables.\n",
        "\n",
        "The answer:An example is the correlation between the number of Nicolas Cage films released in a year and the number of people who die by falling into swimming pools.Is it a coincidence?Yes, it is likely a coincidence.Could it be due to one or more other variables?It could be due to the fact that both of these events are influenced by broader societal trends or random fluctuations that are not directly related to each other. For instance, the number of Nicolas Cage films released might be influenced by the film industry's production schedule, while the number of swimming pool accidents could be influenced by factors such as weather conditions, safety regulations, and public awareness. There is no plausible mechanism through which the release of Nicolas Cage films could cause an increase in swimming pool accidents, or vice versa. Therefore, it is reasonable to conclude that this correlation is spurious and due to chance or other unobserved variables.\n",
        "\n",
        "## Practical02\n"
      ],
      "id": "07d7fd2f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#%pip install openpyxl\n",
        "import pandas as pd\n",
        "data_np = pd.read_excel(\n",
        "    r\"doing-economics-datafile-working-in-excel-project-2 (1).xlsx\",\n",
        "    usecols=\"A:Q\",\n",
        "    header=1,\n",
        "    index_col=\"Period\",\n",
        ")\n",
        "data_n = data_np.iloc[:10, :].copy()\n",
        "data_p = data_np.iloc[14:24, :].copy()\n",
        "data_n.info()"
      ],
      "id": "4ffc5d93",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "data_n = data_n.astype(\"double\")\n",
        "data_p = data_p.astype(\"double\")"
      ],
      "id": "bfb80d5a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Quenstion:(a)Calculate the mean contribution in each period (row) separately for both experiments.\n",
        "\n",
        "(b)Plot a line chart of mean contribution on the vertical axis and time period (from 1 to 10) on the horizontal axis (with a separate line for each experiment). Make sure the lines in the legend are clearly labelled according to the experiment (with punishment or without punishment).\n",
        "\n",
        "(c)Describe any differences and similarities you see in the mean contribution over time in both experiments.\n",
        "The anwser:In the two experiments, the average contributions over time changed. The difference was that the average value without penalty gradually increased and was always higher than the average value with penalty, and the average value without penalty gradually decreased with the development of time.\n"
      ],
      "id": "1d3d4ef3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "\n",
        "mean_n_c = data_n.mean(axis=1)\n",
        "mean_p_c = data_p.agg(np.mean, axis=1)\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "mean_n_c.plot(ax=ax, label=\"Without punishment\")\n",
        "mean_p_c.plot(ax=ax, label=\"With punishment\")\n",
        "ax.set_title(\"Average contributions to the public goods game\")\n",
        "ax.set_ylabel(\"Average contribution\")\n",
        "ax.legend()"
      ],
      "id": "a03a01d7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create new dataframe with bars in\n",
        "compare_grps = pd.DataFrame(\n",
        "    [mean_n_c.loc[[1, 10]], mean_p_c.loc[[1, 10]]],\n",
        "    index=[\"Without punishment\", \"With punishment\"],\n",
        ")\n",
        "# Rename columns to have 'round' in them\n",
        "compare_grps.columns = [\"Round \" + str(i) for i in compare_grps.columns]\n",
        "# Swap the column and index variables around with the transpose function, ready for plotting (.T is transpose)\n",
        "compare_grps = compare_grps.T\n",
        "# Make a bar chart\n",
        "compare_grps.plot.bar(rot=0)"
      ],
      "id": "4ab0cd8d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "n_c = data_n.agg([\"std\", \"var\", \"mean\"], 1)\n",
        "n_c"
      ],
      "id": "a4bb2f28",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "p_c = data_p.agg([\"std\", \"var\", \"mean\"], 1)\n",
        "fig, ax = plt.subplots()\n",
        "n_c[\"mean\"].plot(ax=ax, label=\"mean\")\n",
        "\n",
        "(n_c[\"mean\"] + 2 * n_c[\"std\"]).plot(ax=ax, ylim=(0, None), color=\"red\", label=\"Â±2 s.d.\")\n",
        "\n",
        "(n_c[\"mean\"] - 2 * n_c[\"std\"]).plot(ax=ax, ylim=(0, None), color=\"red\", label=\"\")\n",
        "for i in range(len(data_n.columns)):\n",
        "    ax.scatter(x=data_n.index, y=data_n.iloc[:, i], color=\"k\", alpha=0.3)\n",
        "ax.legend()\n",
        "ax.set_ylabel(\"Average contribution\")\n",
        "ax.set_title(\"Contribution to public goods game without punishment\")\n",
        "plt.show()"
      ],
      "id": "3a5b665b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig, ax = plt.subplots()\n",
        "p_c[\"mean\"].plot(ax=ax, label=\"mean\")\n",
        "# mean + 2 sd\n",
        "(p_c[\"mean\"] + 2 * p_c[\"std\"]).plot(ax=ax, ylim=(0, None), color=\"red\", label=\"Â±2 s.d.\")\n",
        "# mean - 2 sd\n",
        "(p_c[\"mean\"] - 2 * p_c[\"std\"]).plot(ax=ax, ylim=(0, None), color=\"red\", label=\"\")\n",
        "for i in range(len(data_p.columns)):\n",
        "    ax.scatter(x=data_p.index, y=data_p.iloc[:, i], color=\"k\", alpha=0.3)\n",
        "ax.legend()\n",
        "ax.set_ylabel(\"Average contribution\")\n",
        "ax.set_title(\"Contribution to public goods game with punishment\")\n",
        "plt.show()"
      ],
      "id": "20fad9cc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "data_p.apply(lambda x: x.max() - x.min(), axis=1)"
      ],
      "id": "7805de55",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# A lambda function accepting three inputs, a, b, and c, and calculating the sum of the squares\n",
        "test_function = lambda a, b, c: a**2 + b**2 + c**2\n",
        "\n",
        "\n",
        "# Now we apply the function by handing over (in parenthesis) the following inputs: a=3, b=4 and c=5\n",
        "test_function(3, 4, 5)"
      ],
      "id": "5bc3fa4a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "range_function = lambda x: x.max() - x.min()\n",
        "range_p = data_p.apply(range_function, axis=1)\n",
        "range_n = data_n.apply(range_function, axis=1)\n",
        "fig, ax = plt.subplots()\n",
        "range_p.plot(ax=ax, label=\"With punishment\")\n",
        "range_n.plot(ax=ax, label=\"Without punishment\")\n",
        "ax.set_ylim(0, None)\n",
        "ax.legend()\n",
        "ax.set_title(\"Range of contributions to the public goods game\")\n",
        "plt.show()"
      ],
      "id": "1434b481",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "funcs_to_apply = [range_function, \"max\", \"min\", \"std\", \"mean\"]\n",
        "summ_p = data_p.apply(funcs_to_apply, axis=1).rename(columns={\"<lambda>\": \"range\"})\n",
        "summ_n = data_n.apply(funcs_to_apply, axis=1).rename(columns={\"<lambda>\": \"range\"})\n",
        "summ_n.loc[[1, 10], :].round(2)"
      ],
      "id": "cd85e0a0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "summ_p.loc[[1, 10], :].round(2)"
      ],
      "id": "8266b050",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pingouin as pg\n",
        "\n",
        "pg.ttest(x=data_n.iloc[0, :], y=data_p.iloc[0, :])"
      ],
      "id": "236ee53e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pg.ttest(x=data_n.iloc[0, :], y=data_p.iloc[0, :], paired=True)"
      ],
      "id": "81bb7c8c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Practical03\n",
        "\n",
        "### Practical03-01\n"
      ],
      "id": "c7de5e8a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import textwrap\n",
        "pd.read_csv(\n",
        "    \"https://vincentarelbundock.github.io/Rdatasets/csv/dplyr/storms.csv\", nrows=10\n",
        ")"
      ],
      "id": "0ce2e8ff",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "url = \"http://aeturrell.com/research\"\n",
        "page = requests.get(url)\n",
        "page.text[:300]"
      ],
      "id": "d34cc8f1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "soup = BeautifulSoup(page.text, \"html.parser\")\n",
        "print(soup.prettify()[60000:60500])"
      ],
      "id": "0d5fb90e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Get all paragraphs\n",
        "all_paras = soup.find_all(\"p\")\n",
        "# Just show one of the paras\n",
        "all_paras[1]"
      ],
      "id": "6f886f29",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "all_paras[1].text"
      ],
      "id": "5ccedf80",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "projects = soup.find_all(\"div\", class_=\"project-content listing-pub-info\")\n",
        "projects = [x.text.strip() for x in projects]\n",
        "projects[:4]"
      ],
      "id": "c3343410",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df_list = pd.read_html(\n",
        "    \"https://simple.wikipedia.org/wiki/FIFA_World_Cup\", match=\"Sweden\"\n",
        ")\n",
        "# Retrieve first and only entry from list of dataframes\n",
        "df = df_list[0]\n",
        "df.head()"
      ],
      "id": "17e97e66",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Practical03-02\n"
      ],
      "id": "18b6e269"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#pip install requests\n",
        "#pip install html5lib\n",
        "#pip install bs4\n",
        "#pip install pandas\n",
        "from bs4 import BeautifulSoup\n",
        "import requests\n",
        "import re\n",
        "import pandas as pd\n",
        "# Downloading imdb top 250 movie's data\n",
        "url = 'http://www.imdb.com/chart/top'\n",
        "response = requests.get(url)\n",
        "soup = BeautifulSoup(response.text, \"html.parser\")\n",
        "movies = soup.select('td.titleColumn')\n",
        "crew = [a.attrs.get('title') for a in soup.select('td.titleColumn a')]\n",
        "ratings = [b.attrs.get('data-value')\n",
        "\t\tfor b in soup.select('td.posterColumn span[name=ir]')]\n",
        "# create a empty list for storing\n",
        "# movie information\n",
        "list = []\n",
        "\n",
        "# Iterating over movies to extract\n",
        "# each movie's details\n",
        "for index in range(0, len(movies)):\n",
        "\t\n",
        "\t# Separating movie into: 'place',\n",
        "\t# 'title', 'year'\n",
        "\tmovie_string = movies[index].get_text()\n",
        "\tmovie = (' '.join(movie_string.split()).replace('.', ''))\n",
        "\tmovie_title = movie[len(str(index))+1:-7]\n",
        "\tyear = re.search('\\((.*?)\\)', movie_string).group(1)\n",
        "\tplace = movie[:len(str(index))-(len(movie))]\n",
        "\tdata = {\"place\": place,\n",
        "\t\t\t\"movie_title\": movie_title,\n",
        "\t\t\t\"rating\": ratings[index],\n",
        "\t\t\t\"year\": year,\n",
        "\t\t\t\"star_cast\": crew[index],\n",
        "\t\t\t}\n",
        "\tlist.append(data)\n",
        "for movie in list:\n",
        "\tprint(movie['place'], '-', movie['movie_title'], '('+movie['year'] +\n",
        "\t\t') -', 'Starring:', movie['star_cast'], movie['rating'])\n",
        "#saving the list as dataframe\n",
        "#then converting into .csv file\n",
        "df = pd.DataFrame(list)\n",
        "df.to_csv('imdb_top_250_movies.csv',index=False)\n",
        "from bs4 import BeautifulSoup\n",
        "import requests\n",
        "import re\n",
        "import pandas as pd\n",
        "\n",
        "\n",
        "# Downloading imdb top 250 movie's data\n",
        "url = 'http://www.imdb.com/chart/top'\n",
        "response = requests.get(url)\n",
        "soup = BeautifulSoup(response.text, \"html.parser\")\n",
        "movies = soup.select('td.titleColumn')\n",
        "crew = [a.attrs.get('title') for a in soup.select('td.titleColumn a')]\n",
        "ratings = [b.attrs.get('data-value')\n",
        "\t\tfor b in soup.select('td.posterColumn span[name=ir]')]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# create a empty list for storing\n",
        "# movie information\n",
        "list = []\n",
        "\n",
        "# Iterating over movies to extract\n",
        "# each movie's details\n",
        "for index in range(0, len(movies)):\n",
        "\t\n",
        "\t# Separating movie into: 'place',\n",
        "\t# 'title', 'year'\n",
        "\tmovie_string = movies[index].get_text()\n",
        "\tmovie = (' '.join(movie_string.split()).replace('.', ''))\n",
        "\tmovie_title = movie[len(str(index))+1:-7]\n",
        "\tyear = re.search('\\((.*?)\\)', movie_string).group(1)\n",
        "\tplace = movie[:len(str(index))-(len(movie))]\n",
        "\tdata = {\"place\": place,\n",
        "\t\t\t\"movie_title\": movie_title,\n",
        "\t\t\t\"rating\": ratings[index],\n",
        "\t\t\t\"year\": year,\n",
        "\t\t\t\"star_cast\": crew[index],\n",
        "\t\t\t}\n",
        "\tlist.append(data)\n",
        "\n",
        "# printing movie details with its rating.\n",
        "for movie in list:\n",
        "\tprint(movie['place'], '-', movie['movie_title'], '('+movie['year'] +\n",
        "\t\t') -', 'Starring:', movie['star_cast'], movie['rating'])\n",
        "\n",
        "\n",
        "##.......##\n",
        "df = pd.DataFrame(list)\n",
        "df.to_csv('imdb_top_250_movies.csv',index=False)"
      ],
      "id": "678ff27c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Practical03-03\n"
      ],
      "id": "7c0a1b1c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import csv\n",
        " \n",
        "# å®ä¹è¯·æ±ç URL å headers\n",
        "url = \"https://movie.douban.com/top250\"\n",
        "headers = {\n",
        "    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\n",
        "}\n",
        " \n",
        "# åé GET è¯·æ±\n",
        "response = requests.get(url, headers=headers)\n",
        "response.encoding = 'utf-8'  # è®¾ç½®ç¼ç æ¹å¼\n",
        "html_content = response.text  # è·åç½é¡µç HTML åå®¹\n",
        " \n",
        "# ä½¿ç¨ Beautiful Soup è§£æ HTML\n",
        "soup = BeautifulSoup(html_content, 'html.parser')\n",
        " \n",
        "# æåçµå½±åç§°ãæè¿°ãè¯ååè¯ä»·äººæ°\n",
        "movies = []\n",
        "for item in soup.find_all('div', class_='item'):\n",
        "    title = item.find('span', class_='title').get_text()  # çµå½±åç§°\n",
        "    description = item.find('span', class_='inq')  # çµå½±æè¿°\n",
        "    rating = item.find('span', class_='rating_num').get_text()  # è¯å\n",
        "    votes = item.find('div', class_='star').find_all('span')[3].get_text()  # è¯ä»·äººæ°\n",
        "    \n",
        "    # å¦ææ²¡ææè¿°ï¼å°å¶ç½®ä¸ºç©ºå­ç¬¦ä¸²\n",
        "    if description:\n",
        "        description = description.get_text()\n",
        "    else:\n",
        "        description = ''\n",
        "    \n",
        "    movie = {\n",
        "        \"title\": title,\n",
        "        \"description\": description,\n",
        "        \"rating\": rating,\n",
        "        \"votes\": votes.replace('äººè¯ä»·', '').strip()\n",
        "    }\n",
        "    movies.append(movie)\n",
        " \n",
        "# å°æ°æ®ä¿å­å° CSV æä»¶\n",
        "with open('douban_top250.csv', 'w', newline='', encoding='utf-8') as csvfile:\n",
        "    fieldnames = ['title', 'description', 'rating', 'votes']\n",
        "    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n",
        " \n",
        "    writer.writeheader()  # åå¥è¡¨å¤´\n",
        "    for movie in movies:\n",
        "        writer.writerow(movie)  # åå¥æ¯ä¸è¡æ°æ®\n",
        " \n",
        "print(\"save success douban_top250.csv\")"
      ],
      "id": "5734ca0f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Practical04\n"
      ],
      "id": "2776b802"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from bs4 import BeautifulSoup\n",
        "import re  \n",
        "import urllib.request, urllib.error  # certain URL\n",
        "import xlwt  # excel operation\n",
        " \n",
        " \n",
        "def main():\n",
        "    baseurl = \"https://movie.douban.com/top250?start=\"\n",
        "    datalist = getdata(baseurl)\n",
        "    savepath = \".\\\\douban_top250.csv\"\n",
        "    savedata(datalist, savepath)\n",
        " \n",
        " \n",
        "# compileè¿åçæ¯å¹éå°çæ¨¡å¼å¯¹è±¡\n",
        "findLink = re.compile(r'<a href=\"(.*?)\">')  # detail\n",
        "findImgSrc = re.compile(r'<img.*src=\"(.*?)\"', re.S)  # re.S  message of picture\n",
        "findTitle = re.compile(r'<span class=\"title\">(.*)</span>')  # name \n",
        "findRating = re.compile(r'<span class=\"rating_num\" property=\"v:average\">(.*)</span>')  # score\n",
        "findJudge = re.compile(r'<span>(\\d*)äººè¯ä»·</span>')  # number\n",
        "findInq = re.compile(r'<span class=\"inq\">(.*)</span>')  # about\n",
        "findBd = re.compile(r'<p class=\"\">(.*?)</p>', re.S)  # actor..\n",
        " \n",
        " \n",
        "##è·åç½é¡µæ°æ®\n",
        "def getdata(baseurl):\n",
        "    datalist = []\n",
        "    for i in range(0, 10):\n",
        "        url = baseurl + str(i * 25)  ##move on next page\n",
        "        html = geturl(url)\n",
        "        soup = BeautifulSoup(html, \"html.parser\")  #  BeautifulSoup soupï¼html\n",
        "        for item in soup.find_all(\"div\", class_='item'):  ##find_all \n",
        "            data = []  # save HTML \n",
        "            item = str(item)  ##trans\n",
        "            link = re.findall(findLink, item)[0]  \n",
        "            data.append(link)\n",
        " \n",
        "            imgSrc = re.findall(findImgSrc, item)[0]\n",
        "            data.append(imgSrc)\n",
        " \n",
        "            titles = re.findall(findTitle, item)  ##en zh transla\n",
        "            if (len(titles) == 2):\n",
        "                onetitle = titles[0]\n",
        "                data.append(onetitle)\n",
        "                twotitle = titles[1].replace(\"/\", \"\")  # can\n",
        "                data.append(twotitle)\n",
        "            else:\n",
        "                data.append(titles)\n",
        "                data.append(\" \")  ##value\n",
        " \n",
        "            rating = re.findall(findRating, item)[0]  # add score\n",
        "            data.append(rating)\n",
        " \n",
        "            judgeNum = re.findall(findJudge, item)[0]  # add number\n",
        "            data.append(judgeNum)\n",
        " \n",
        "            inq = re.findall(findInq, item)  # add abut\n",
        "            if len(inq) != 0:\n",
        "                inq = inq[0].replace(\"ã\", \"\")\n",
        "                data.append(inq)\n",
        "            else:\n",
        "                data.append(\" \")\n",
        " \n",
        "            bd = re.findall(findBd, item)[0]\n",
        "            bd = re.sub('<br(\\s+)?/>(\\s+)?', \" \", bd)\n",
        "            bd = re.sub('/', \" \", bd)\n",
        "            data.append(bd.strip())  # cancel\n",
        "            datalist.append(data)\n",
        "    return datalist\n",
        " \n",
        " \n",
        "##ä¿å­æ°æ®\n",
        "def savedata(datalist, savepath):\n",
        "    workbook = xlwt.Workbook(encoding=\"utf-8\", style_compression=0)  ##style_compression=0\n",
        "    worksheet = workbook.add_sheet(\"douban_top250\", cell_overwrite_ok=True)  # cell_overwrite_ok=True\n",
        "    column = (\"çµå½±è¯¦æé¾æ¥\", \"å¾çé¾æ¥\", \"å½±çä¸­æå\", \"å½±çå¤å½å\", \"è¯å\", \"è¯ä»·æ°\", \"æ¦åµ\", \"ç¸å³ä¿¡æ¯\")  ##execl\n",
        "    for i in range(0, 8):\n",
        "        worksheet.write(0, i, column[i])  # å°column[i] save [0]\n",
        "    for i in range(0, 250):\n",
        "        data = datalist[i]\n",
        "        for j in range(0, 8):\n",
        "            worksheet.write(i + 1, j, data[j])\n",
        "    workbook.save(savepath)\n",
        " \n",
        " \n",
        "##ç¬åç½é¡µ\n",
        "def geturl(url):\n",
        "    head = {\n",
        "        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) \"\n",
        "                      \"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\"\n",
        "    }\n",
        "    req = urllib.request.Request(url, headers=head)\n",
        "    try:  ## check error\n",
        "        response = urllib.request.urlopen(req)\n",
        "        html = response.read().decode(\"utf-8\")\n",
        "    except urllib.error.URLError as e:\n",
        "        if hasattr(e, \"code\"):  \n",
        "            print(e.code)\n",
        "        if hasattr(e, \"reason\"):\n",
        "            print(e.reason)\n",
        "    return html\n",
        " \n",
        " \n",
        "if __name__ == '__main__':\n",
        "    main()\n",
        "    print(\"ç¬åæåï¼ï¼ï¼\")\n",
        "from bs4 import BeautifulSoup\n",
        "import re\n",
        "import urllib.request, urllib.error  # for URL requests\n",
        "import csv  # for saving as CSV\n",
        "\n",
        "\n",
        "def main():\n",
        "    baseurl = \"https://movie.douban.com/top250?start=\"\n",
        "    datalist = getdata(baseurl)\n",
        "    savepath = \"./douban_top250.csv\"\n",
        "    savedata(datalist, savepath)\n",
        "\n",
        "\n",
        "# Regular expressions to extract information\n",
        "findLink = re.compile(r'<a href=\"(.*?)\">')  # detail link\n",
        "findImgSrc = re.compile(r'<img.*src=\"(.*?)\"', re.S)  # image link\n",
        "findTitle = re.compile(r'<span class=\"title\">(.*)</span>')  # movie title\n",
        "findRating = re.compile(r'<span class=\"rating_num\" property=\"v:average\">(.*)</span>')  # rating\n",
        "findJudge = re.compile(r'<span>(\\d*)äººè¯ä»·</span>')  # number of reviews\n",
        "findInq = re.compile(r'<span class=\"inq\">(.*)</span>')  # summary\n",
        "findBd = re.compile(r'<p class=\"\">(.*?)</p>', re.S)  # additional info\n",
        "\n",
        "\n",
        "# Function to get data from the website\n",
        "def getdata(baseurl):\n",
        "    datalist = []\n",
        "    for i in range(0, 10):\n",
        "        url = baseurl + str(i * 25)  # Go to the next page\n",
        "        html = geturl(url)\n",
        "        soup = BeautifulSoup(html, \"html.parser\")\n",
        "        for item in soup.find_all(\"div\", class_='item'):  # Extract movie items\n",
        "            data = []  # Save movie data\n",
        "            item = str(item)  # Convert to string for regex\n",
        "            link = re.findall(findLink, item)[0]  # Detail link\n",
        "            data.append(link)\n",
        "\n",
        "            imgSrc = re.findall(findImgSrc, item)[0]  # Image link\n",
        "            data.append(imgSrc)\n",
        "\n",
        "            titles = re.findall(findTitle, item)  # Titles (CN and foreign)\n",
        "            if len(titles) == 2:\n",
        "                data.append(titles[0])  # Chinese title\n",
        "                data.append(titles[1].replace(\"/\", \"\").strip())  # Foreign title\n",
        "            else:\n",
        "                data.append(titles[0])  # Only Chinese title\n",
        "                data.append(\" \")  # Empty for foreign title\n",
        "\n",
        "            rating = re.findall(findRating, item)[0]  # Rating\n",
        "            data.append(rating)\n",
        "\n",
        "            judgeNum = re.findall(findJudge, item)[0]  # Number of reviews\n",
        "            data.append(judgeNum)\n",
        "\n",
        "            inq = re.findall(findInq, item)  # Summary\n",
        "            if len(inq) != 0:\n",
        "                data.append(inq[0].replace(\"ã\", \"\"))\n",
        "            else:\n",
        "                data.append(\" \")\n",
        "\n",
        "            bd = re.findall(findBd, item)[0]  # Additional info\n",
        "            bd = re.sub('<br(\\s+)?/>(\\s+)?', \" \", bd)  # Replace line breaks\n",
        "            bd = re.sub('/', \" \", bd)  # Replace slashes\n",
        "            data.append(bd.strip())\n",
        "\n",
        "            datalist.append(data)\n",
        "    return datalist\n",
        "\n",
        "\n",
        "# Function to save data to a CSV file\n",
        "def savedata(datalist, savepath):\n",
        "    headers = [\"çµå½±è¯¦æé¾æ¥\", \"å¾çé¾æ¥\", \"å½±çä¸­æå\", \"å½±çå¤å½å\", \"è¯å\", \"è¯ä»·æ°\", \"æ¦åµ\", \"ç¸å³ä¿¡æ¯\"]\n",
        "    with open(savepath, mode='w', encoding='utf-8', newline='') as file:\n",
        "        writer = csv.writer(file)\n",
        "        writer.writerow(headers)  # Write headers\n",
        "        for data in datalist:\n",
        "            writer.writerow(data)  # Write each movie's data\n",
        "\n",
        "\n",
        "# Function to get HTML content from a URL\n",
        "def geturl(url):\n",
        "    head = {\n",
        "        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) \"\n",
        "                      \"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\"\n",
        "    }\n",
        "    req = urllib.request.Request(url, headers=head)\n",
        "    try:\n",
        "        response = urllib.request.urlopen(req)\n",
        "        html = response.read().decode(\"utf-8\")\n",
        "    except urllib.error.URLError as e:\n",
        "        if hasattr(e, \"code\"):\n",
        "            print(e.code)\n",
        "        if hasattr(e, \"reason\"):\n",
        "            print(e.reason)\n",
        "        return \"\"\n",
        "    return html\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    main()\n",
        "    print(\"ç¬åæåå¹¶ä¿å­ä¸ºCSVæä»¶ï¼\")\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load datasets\n",
        "douban_file_path = 'douban_top250.csv'  \n",
        "imdb_file_path = 'IMDB_Top250.csv'      \n",
        "\n",
        "douban_data = pd.read_csv(douban_file_path, encoding='utf-8', on_bad_lines='skip')\n",
        "imdb_data = pd.read_csv(imdb_file_path, encoding='utf-8', on_bad_lines='skip')\n",
        "\n",
        "# Renaming columns for clarity and merging compatibility\n",
        "douban_data.rename(columns={\n",
        "    'å½±çä¸­æå': 'Title',\n",
        "    'è¯å': 'Douban_Score',\n",
        "    'è¯ä»·æ°': 'Douban_Reviews',\n",
        "    'ç¸å³ä¿¡æ¯': 'Douban_Info'\n",
        "}, inplace=True)\n",
        "\n",
        "imdb_data.rename(columns={\n",
        "    'Name': 'Title',\n",
        "    'Year': 'Release_Year',\n",
        "    'IMDB Ranking': 'IMDB_Score',\n",
        "    'Genre': 'IMDB_Genre',\n",
        "    'Director': 'IMDB_Director'\n",
        "}, inplace=True)\n",
        "\n",
        "# Calculate average scores for both platforms\n",
        "douban_avg_score = douban_data['Douban_Score'].mean()\n",
        "imdb_avg_score = imdb_data['IMDB_Score'].mean()\n",
        "\n",
        "# Find overlapping movies by title\n",
        "overlap_movies = pd.merge(douban_data, imdb_data, on='Title')\n",
        "\n",
        "# Visualize average scores\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.bar(['Douban', 'IMDb'], [douban_avg_score, imdb_avg_score], alpha=0.7)\n",
        "plt.title('Average Scores: Douban vs IMDb')\n",
        "plt.ylabel('Average Score')\n",
        "plt.show()\n",
        "\n",
        "# Analyze release year distribution\n",
        "plt.figure(figsize=(10, 5))\n",
        "douban_data['Douban_Info'] = douban_data['Douban_Info'].astype(str)\n",
        "douban_years = douban_data['Douban_Info'].str.extract(r'(\\d{4})').dropna()\n",
        "douban_years = douban_years[0].astype(int).value_counts().sort_index()\n",
        "\n",
        "imdb_years = imdb_data['Release_Year'].value_counts().sort_index()\n",
        "\n",
        "douban_years.plot(kind='bar', alpha=0.7, label='Douban', figsize=(10, 5))\n",
        "imdb_years.plot(kind='bar', alpha=0.7, label='IMDb', color='orange')\n",
        "plt.title('Release Year Distribution')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Number of Movies')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Analyze genre distribution\n",
        "imdb_genres = imdb_data['IMDB_Genre'].str.split(',').explode().str.strip().value_counts()\n",
        "plt.figure(figsize=(10, 5))\n",
        "imdb_genres.head(10).plot(kind='bar', alpha=0.7, color='orange')\n",
        "plt.title('Top 10 IMDb Genres')\n",
        "plt.xlabel('Genre')\n",
        "plt.ylabel('Count')\n",
        "plt.show()\n",
        "\n",
        "# Top directors by movie count\n",
        "douban_directors = douban_data['Douban_Info'].str.extract(r'å¯¼æ¼: (.+?) ').dropna()\n",
        "douban_top_directors = douban_directors[0].value_counts().head(10)\n",
        "\n",
        "imdb_top_directors = imdb_data['IMDB_Director'].value_counts().head(10)\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "douban_top_directors.plot(kind='bar', alpha=0.7, label='Douban', color='blue')\n",
        "plt.title('Top 10 Douban Directors')\n",
        "plt.xlabel('Director')\n",
        "plt.ylabel('Movie Count')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "imdb_top_directors.plot(kind='bar', alpha=0.7, label='IMDb', color='orange')\n",
        "plt.title('Top 10 IMDb Directors')\n",
        "plt.xlabel('Director')\n",
        "plt.ylabel('Movie Count')\n",
        "plt.show()\n",
        "\n",
        "# Save overlapping movies to a CSV file\n",
        "overlap_movies.to_csv('overlap_movies.csv', index=False)\n",
        "\n",
        "# Print results\n",
        "print(f\"è±ç£å¹³åè¯å: {douban_avg_score}\")\n",
        "print(f\"IMDbå¹³åè¯å: {imdb_avg_score}\")\n",
        "print(f\"éå çµå½±æ°é: {len(overlap_movies)}\")"
      ],
      "id": "bebeb4b7",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "E:\\phthon\\python_install3.11.19\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}